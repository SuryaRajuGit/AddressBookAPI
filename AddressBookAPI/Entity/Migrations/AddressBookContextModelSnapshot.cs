// <auto-generated />
using System;
using AddressBookAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AddressBookAPI.Migrations
{
    [DbContext(typeof(AddressBookContext))]
    partial class AddressBookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AddressBookAPI.Data.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("AddressBookAPI.Data.address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("country")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("refTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("stateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("zipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("refTermId");

                    b.HasIndex("userId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("AddressBookAPI.Data.asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("field")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("AssetDTO");
                });

            modelBuilder.Entity("AddressBookAPI.Data.email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("emailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("refTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("refTermId");

                    b.HasIndex("userId");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("AddressBookAPI.Data.phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("refTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("refTermId");

                    b.HasIndex("userId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("AddressBookAPI.Data.refSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("key")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefSet");
                });

            modelBuilder.Entity("AddressBookAPI.Data.refTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("key")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefTerm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12cf7780-9096-4855-a049-40476cead362"),
                            description = "type of phone number",
                            key = "WORK"
                        },
                        new
                        {
                            Id = new Guid("f87b8232-f2d8-4286-ac13-422aa54194ce"),
                            description = "type of email ",
                            key = "PERSONAL"
                        },
                        new
                        {
                            Id = new Guid("04cd138d-6ce7-4389-919c-6687cf7f011f"),
                            description = "type of address",
                            key = "ALTERNATE"
                        });
                });

            modelBuilder.Entity("AddressBookAPI.Data.setRefTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefTermId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("SetRefTerm");
                });

            modelBuilder.Entity("AddressBookAPI.Data.user", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AddressBookAPI.Data.address", b =>
                {
                    b.HasOne("AddressBookAPI.Data.refTerm", "refTerm")
                        .WithMany()
                        .HasForeignKey("refTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBookAPI.Data.user", "user")
                        .WithMany("address")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressBookAPI.Data.asset", b =>
                {
                    b.HasOne("AddressBookAPI.Data.user", null)
                        .WithMany("assetdto")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("AddressBookAPI.Data.email", b =>
                {
                    b.HasOne("AddressBookAPI.Data.refTerm", "refTerm")
                        .WithMany()
                        .HasForeignKey("refTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBookAPI.Data.user", "user")
                        .WithMany("email")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressBookAPI.Data.phone", b =>
                {
                    b.HasOne("AddressBookAPI.Data.refTerm", "refTerm")
                        .WithMany()
                        .HasForeignKey("refTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBookAPI.Data.user", "user")
                        .WithMany("phone")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
