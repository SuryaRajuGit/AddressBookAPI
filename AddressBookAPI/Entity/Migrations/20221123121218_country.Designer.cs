// <auto-generated />
using System;
using AddressBookAPI.Entity.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AddressBookAPI.Migrations
{
    [DbContext(typeof(AddressBookContext))]
    [Migration("20221123121218_country")]
    partial class country
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AddressBookAPI.Entity.Models.address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("country")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("refTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("state_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("zipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("refTermId");

                    b.HasIndex("userId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("field")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("AssetDTO");
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("refTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("refTermId");

                    b.HasIndex("userId");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("phone_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("refTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("refTermId");

                    b.HasIndex("userId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.refSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("key")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefSet");
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.refTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("key")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefTerm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12cf7780-9096-4855-a049-40476cead362"),
                            description = "type of phone number",
                            key = "WORK"
                        },
                        new
                        {
                            Id = new Guid("f87b8232-f2d8-4286-ac13-422aa54194ce"),
                            description = "type of email ",
                            key = "PERSONAL"
                        },
                        new
                        {
                            Id = new Guid("04cd138d-6ce7-4389-919c-6687cf7f011f"),
                            description = "type of address#",
                            key = "ALTERNATE"
                        },
                        new
                        {
                            Id = new Guid("ee3f90cd-2d51-40e8-a25b-f7c81f8e76b2"),
                            description = "INDIA_TYPE",
                            key = "INDIA"
                        },
                        new
                        {
                            Id = new Guid("7aae5636-8a33-4cbd-8fbf-09d7c143ed6b"),
                            description = "USA_TYPE",
                            key = "USA"
                        });
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.setRefTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("refSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("refTermId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("refSetId");

                    b.HasIndex("refTermId");

                    b.ToTable("SetRefTerm");
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.user", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("first_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.address", b =>
                {
                    b.HasOne("AddressBookAPI.Entity.Models.refTerm", "refTerm")
                        .WithMany()
                        .HasForeignKey("refTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBookAPI.Entity.Models.user", "user")
                        .WithMany("address")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.asset", b =>
                {
                    b.HasOne("AddressBookAPI.Entity.Models.user", null)
                        .WithMany("assetdto")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.email", b =>
                {
                    b.HasOne("AddressBookAPI.Entity.Models.refTerm", "refTerm")
                        .WithMany()
                        .HasForeignKey("refTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBookAPI.Entity.Models.user", "user")
                        .WithMany("email")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.phone", b =>
                {
                    b.HasOne("AddressBookAPI.Entity.Models.refTerm", "refTerm")
                        .WithMany()
                        .HasForeignKey("refTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBookAPI.Entity.Models.user", "user")
                        .WithMany("phone")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.setRefTerm", b =>
                {
                    b.HasOne("AddressBookAPI.Entity.Models.refSet", "refSet")
                        .WithMany()
                        .HasForeignKey("refSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBookAPI.Entity.Models.refTerm", "refTerm")
                        .WithMany()
                        .HasForeignKey("refTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
