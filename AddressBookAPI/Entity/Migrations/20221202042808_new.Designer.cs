// <auto-generated />
using System;
using AddressBookAPI.Entity.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AddressBookAPI.Migrations
{
    [DbContext(typeof(AddressBookContext))]
    [Migration("20221202042808_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AddressBookAPI.Entity.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Country")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RefTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Zipcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RefTermId");

                    b.HasIndex("UserId");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "vizag",
                            Country = new Guid("ee3f90cd-2d51-40e8-a25b-f7c81f8e76b2"),
                            Line1 = "s-1",
                            Line2 = "s2",
                            RefTermId = new Guid("f87b8232-f2d8-4286-ac13-422aa54194ce"),
                            StateName = "AndhraPradesh",
                            UserId = new Guid("b28f8b13-fab0-42cf-846d-225da6057a5a"),
                            Zipcode = "531116"
                        });
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Field")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AssetDTO");
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RefTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RefTermId");

                    b.HasIndex("UserId");

                    b.ToTable("Email");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailAddress = "psuryaraju5@gmail.com",
                            RefTermId = new Guid("f87b8232-f2d8-4286-ac13-422aa54194ce"),
                            UserId = new Guid("b28f8b13-fab0-42cf-846d-225da6057a5a")
                        });
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RefTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RefTermId");

                    b.HasIndex("UserId");

                    b.ToTable("Phone");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PhoneNumber = "8142255769",
                            RefTermId = new Guid("f87b8232-f2d8-4286-ac13-422aa54194ce"),
                            UserId = new Guid("b28f8b13-fab0-42cf-846d-225da6057a5a")
                        });
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.RefSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefSet");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4005322-979c-4df5-96b2-16b2f6101006"),
                            Description = "email",
                            Key = "EMAIL_ADDRESS_TYPE"
                        },
                        new
                        {
                            Id = new Guid("9406dc1f-7781-4a7c-9f21-4d0267fb35d3"),
                            Description = "address ",
                            Key = "ADDRESS_TYPE"
                        },
                        new
                        {
                            Id = new Guid("1b484930-bf78-4b07-afef-6e9260f31e7b"),
                            Description = "country ",
                            Key = "COUNTRY"
                        },
                        new
                        {
                            Id = new Guid("c8dc949e-47f7-4eac-a83d-d0ebc8031300"),
                            Description = "phone",
                            Key = "PHONE_NUMBER_TYPE"
                        });
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.RefTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefTerm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12cf7780-9096-4855-a049-40476cead362"),
                            Description = "work type",
                            Key = "WORK"
                        },
                        new
                        {
                            Id = new Guid("f87b8232-f2d8-4286-ac13-422aa54194ce"),
                            Description = "personal type",
                            Key = "PERSONAL"
                        },
                        new
                        {
                            Id = new Guid("04cd138d-6ce7-4389-919c-6687cf7f011f"),
                            Description = "alternate  type",
                            Key = "ALTERNATE"
                        },
                        new
                        {
                            Id = new Guid("ee3f90cd-2d51-40e8-a25b-f7c81f8e76b2"),
                            Description = "INDIA_TYPE",
                            Key = "INDIA"
                        },
                        new
                        {
                            Id = new Guid("7aae5636-8a33-4cbd-8fbf-09d7c143ed6b"),
                            Description = "USA_TYPE",
                            Key = "USA"
                        });
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.SetRefTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefTermId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RefSetId");

                    b.HasIndex("RefTermId");

                    b.ToTable("SetRefTerm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb9646a4-3c58-43dd-a919-8dc457559422"),
                            RefSetId = new Guid("b4005322-979c-4df5-96b2-16b2f6101006"),
                            RefTermId = new Guid("f87b8232-f2d8-4286-ac13-422aa54194ce")
                        },
                        new
                        {
                            Id = new Guid("50373bbd-5846-40cf-bd60-021de6f919a5"),
                            RefSetId = new Guid("b4005322-979c-4df5-96b2-16b2f6101006"),
                            RefTermId = new Guid("12cf7780-9096-4855-a049-40476cead362")
                        },
                        new
                        {
                            Id = new Guid("edaa1847-9bcc-407b-894c-d7cb3caa615a"),
                            RefSetId = new Guid("b4005322-979c-4df5-96b2-16b2f6101006"),
                            RefTermId = new Guid("04cd138d-6ce7-4389-919c-6687cf7f011f")
                        },
                        new
                        {
                            Id = new Guid("28f501c3-f8ae-48fe-bb35-e25ecaa56f22"),
                            RefSetId = new Guid("9406dc1f-7781-4a7c-9f21-4d0267fb35d3"),
                            RefTermId = new Guid("f87b8232-f2d8-4286-ac13-422aa54194ce")
                        },
                        new
                        {
                            Id = new Guid("8beb045a-988a-4199-a0e4-0673b9d60e34"),
                            RefSetId = new Guid("9406dc1f-7781-4a7c-9f21-4d0267fb35d3"),
                            RefTermId = new Guid("12cf7780-9096-4855-a049-40476cead362")
                        },
                        new
                        {
                            Id = new Guid("5554537c-5721-468d-a3e5-be5234778bf1"),
                            RefSetId = new Guid("9406dc1f-7781-4a7c-9f21-4d0267fb35d3"),
                            RefTermId = new Guid("04cd138d-6ce7-4389-919c-6687cf7f011f")
                        },
                        new
                        {
                            Id = new Guid("ad1304c1-270a-481a-a99c-b1781e2ce33c"),
                            RefSetId = new Guid("c8dc949e-47f7-4eac-a83d-d0ebc8031300"),
                            RefTermId = new Guid("f87b8232-f2d8-4286-ac13-422aa54194ce")
                        },
                        new
                        {
                            Id = new Guid("bf325767-e54a-47df-b733-cf7f65e64dee"),
                            RefSetId = new Guid("c8dc949e-47f7-4eac-a83d-d0ebc8031300"),
                            RefTermId = new Guid("12cf7780-9096-4855-a049-40476cead362")
                        },
                        new
                        {
                            Id = new Guid("0a2991e5-f5ea-4f36-8e75-5157440b4760"),
                            RefSetId = new Guid("c8dc949e-47f7-4eac-a83d-d0ebc8031300"),
                            RefTermId = new Guid("04cd138d-6ce7-4389-919c-6687cf7f011f")
                        },
                        new
                        {
                            Id = new Guid("8ffc2abc-8abb-442e-85dd-bfa1fab18d85"),
                            RefSetId = new Guid("1b484930-bf78-4b07-afef-6e9260f31e7b"),
                            RefTermId = new Guid("ee3f90cd-2d51-40e8-a25b-f7c81f8e76b2")
                        },
                        new
                        {
                            Id = new Guid("1a433bb5-263f-4df8-bec5-8318cb56755e"),
                            RefSetId = new Guid("1b484930-bf78-4b07-afef-6e9260f31e7b"),
                            RefTermId = new Guid("7aae5636-8a33-4cbd-8fbf-09d7c143ed6b")
                        });
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b28f8b13-fab0-42cf-846d-225da6057a5a"),
                            FirstName = "surya",
                            LastName = "raju"
                        });
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.Address", b =>
                {
                    b.HasOne("AddressBookAPI.Entity.Models.RefTerm", "RefTerm")
                        .WithMany()
                        .HasForeignKey("RefTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBookAPI.Entity.Models.User", "User")
                        .WithMany("Address")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.Asset", b =>
                {
                    b.HasOne("AddressBookAPI.Entity.Models.User", null)
                        .WithMany("Assetdto")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.Email", b =>
                {
                    b.HasOne("AddressBookAPI.Entity.Models.RefTerm", "refTerm")
                        .WithMany()
                        .HasForeignKey("RefTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBookAPI.Entity.Models.User", "user")
                        .WithMany("Email")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.Phone", b =>
                {
                    b.HasOne("AddressBookAPI.Entity.Models.RefTerm", "RefTerm")
                        .WithMany()
                        .HasForeignKey("RefTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBookAPI.Entity.Models.User", "User")
                        .WithMany("Phone")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressBookAPI.Entity.Models.SetRefTerm", b =>
                {
                    b.HasOne("AddressBookAPI.Entity.Models.RefSet", "RefSet")
                        .WithMany()
                        .HasForeignKey("RefSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBookAPI.Entity.Models.RefTerm", "RefTerm")
                        .WithMany()
                        .HasForeignKey("RefTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
